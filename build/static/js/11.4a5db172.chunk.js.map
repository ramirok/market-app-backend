{"version":3,"sources":["containers/Checkout/Checkout.module.css","containers/Checkout/Checkuout.js","component/FormContainer/FormContainer.js","component/FormContainer/FormContainer.module.css"],"names":["module","exports","Checkout","loginData","useUser","useCart","cartItems","loaded","resetCart","useState","paidFor","setPaidFor","error","setError","infoIncomplete","setInfoIncomplete","loading","setLoading","paypalRef","useRef","total","length","map","el","price","quantity","reduce","acc","cur","toFixed","history","useHistory","useEffect","token","fetchService","then","data","infoCompleted","addressCompleted","script","document","createElement","src","body","appendChild","addEventListener","window","paypal","Buttons","style","shape","color","layout","label","createOrder","a","response","orderID","onApprove","actions","onError","render","current","getElementById","display","toRender","id","marginBottom","key","name","className","classes","ItemContainer","ImageContainer","img","alt","width","ItemDescription","capitalizeName","PriceItemTotal","PriceTotal","ref","text","classFromProps","Button","onClick","location","reload","push","FormContainer","props","Background","children"],"mappings":"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","file":"static/js/11.4a5db172.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Checkout_Button__YO5gh\",\"ItemContainer\":\"Checkout_ItemContainer__3vpU1\",\"ItemDescription\":\"Checkout_ItemDescription__-daOG\",\"ImageContainer\":\"Checkout_ImageContainer__1_fby\",\"PriceItemTotal\":\"Checkout_PriceItemTotal__2Q7mK\",\"PriceTotal\":\"Checkout_PriceTotal__3WHAy\"};","import React, { useEffect, useState, useRef } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useCart } from \"../../context/cartContext\";\nimport { useUser } from \"../../context/userContext\";\nimport { fetchService } from \"../../utils/fetchServices\";\nimport { capitalizeName } from \"../../utils/helpers\";\nimport Button from \"../../component/Button/Button\";\nimport FormContainer from \"../../component/FormContainer/FormContainer\";\nimport Spinner from \"../../component/UI/Spinner/Spinner\";\nimport classes from \"./Checkout.module.css\";\n\nconst Checkout = () => {\n  // customHook for user context:\n  // loginData returns ={name, email, token}\n  const { loginData } = useUser();\n\n  // customHook for cart context\n  // cartItems = [array of items]\n  // resetCart : reset cart on purchase aprove\n  // loaded: cart has been loaded\n  const { cartItems, loaded, resetCart } = useCart();\n\n  // state for congratulations message\n  const [paidFor, setPaidFor] = useState(false);\n\n  // state for error message\n  const [error, setError] = useState(false);\n\n  // state for when info is incompleted\n  const [infoIncomplete, setInfoIncomplete] = useState(true);\n\n  // loading state\n  const [loading, setLoading] = useState(true);\n\n  // reference for paypal button\n  let paypalRef = useRef();\n\n  // calculate cart total\n  const total =\n    cartItems.length > 0\n      ? cartItems\n          .map((el) => el.price * el.quantity)\n          .reduce((acc, cur) => acc + cur)\n          .toFixed(2)\n      : null;\n\n  const history = useHistory();\n\n  useEffect(() => {\n    // check if user has personal info and address completed\n    if (loginData.token && loaded) {\n      fetchService(\"get\", \"users/user-details\", loginData.token).then(\n        (data) => {\n          if (data.infoCompleted && data.addressCompleted) {\n            setInfoIncomplete(false);\n          } else {\n            setLoading(loginData.token ? false : true);\n          }\n        }\n      );\n\n      // if paidfor=false , error=false and info is completed, load the script and render the button\n      if (!paidFor && !error && !infoIncomplete) {\n        const script = document.createElement(\"script\");\n        script.src =\n          \"https://www.paypal.com/sdk/js?client-id=AV_teTqvX8rl7oj3_wY5lD_NaaMO6J6UvmjiHk_lPSFQk5V4SlMoWrn9IAIXx9NNEShlcQb1C5V3anaS\";\n        document.body.appendChild(script);\n\n        // add event for script finish loading\n        script.addEventListener(\"load\", () => {\n          setLoading(false);\n          // if the are items in the cart, renders paypal button\n          if (cartItems.length > 0) {\n            window.paypal\n              .Buttons({\n                style: {\n                  shape: \"pill\",\n                  color: \"blue\",\n                  layout: \"vertical\",\n                  label: \"paypal\",\n                },\n                createOrder: async () => {\n                  const response = await fetchService(\n                    \"post\",\n                    \"users/purchase-aproved\",\n                    loginData.token\n                  );\n                  return response.orderID;\n                },\n                onApprove: async (data, actions) => {\n                  setLoading(true);\n                  const response = await resetCart(\n                    loginData.token,\n                    data.orderID\n                  );\n                  response ? setPaidFor(true) : setError(true);\n                },\n                onError: (error) => {\n                  setError(true);\n                },\n              })\n              .render(paypalRef.current);\n            document.getElementById(\"spinner\").style.display = \"none\";\n            document.getElementById(\"summary-container\").style.display =\n              \"block\";\n          }\n        });\n      }\n    }\n  }, [\n    paidFor,\n    cartItems,\n    loginData.token,\n    error,\n    resetCart,\n    infoIncomplete,\n    history,\n    loaded,\n  ]);\n\n  // render paypal button\n  let toRender = (\n    <>\n      <div id=\"spinner\">\n        <Spinner />\n      </div>\n\n      <div id=\"summary-container\" style={{ display: \"none\" }}>\n        <h3 style={{ marginBottom: \"1rem\" }}>Checkout summary</h3>\n\n        {cartItems.map((el) => (\n          <div key={el.name} className={classes.ItemContainer}>\n            <div className={classes.ImageContainer}>\n              <img src={`/${el.img}`} alt={el.name} width=\"50px\" />\n            </div>\n            <div className={classes.ItemDescription}>\n              <p>{capitalizeName(el.name)}</p>\n              <p>\n                $ {el.price} x{el.quantity}\n              </p>\n              <p className={classes.PriceItemTotal}>\n                $ {(el.price * el.quantity).toFixed(2)}\n              </p>\n            </div>\n          </div>\n        ))}\n        <h4 className={classes.PriceTotal}>Total: $ {total}</h4>\n\n        {/* paypal button */}\n        <div ref={paypalRef} />\n      </div>\n    </>\n  );\n\n  // if error, returns error message\n  if (error) {\n    toRender = (\n      <>\n        <p style={{ marginBottom: \"1rem\" }}>\n          Something went wrong, please try again.\n        </p>\n        <Button\n          text=\"Ok\"\n          classFromProps={classes.Button}\n          onClick={() => window.location.reload()}\n        />\n      </>\n    );\n  }\n\n  // if paidFor = true, return succeed message\n  if (paidFor) {\n    toRender = (\n      <>\n        <h3 style={{ marginBottom: \"1rem\" }}>Congratulations</h3>\n        <p style={{ marginBottom: \"2rem\" }}>Your order has been placed.</p>\n        <Button\n          classFromProps={classes.Button}\n          text=\"Check orders\"\n          onClick={() => history.push(\"/app/orders\")}\n        />\n      </>\n    );\n  }\n\n  // if infoIncomplete = true, return redirect to settings button\n  if (infoIncomplete) {\n    toRender = (\n      <>\n        <p style={{ marginBottom: \"1rem\" }}>\n          Please complete your personal information and address in account\n          settings.\n        </p>\n        <Button\n          text=\"Ok\"\n          classFromProps={classes.Button}\n          onClick={() => history.push(\"/app/account\")}\n        />\n      </>\n    );\n  }\n\n  return <FormContainer>{loading ? <Spinner /> : toRender}</FormContainer>;\n};\n\nexport default Checkout;\n","import React from \"react\";\n\nimport classes from \"./FormContainer.module.css\";\n\nconst FormContainer = (props) => {\n  return (\n    <>\n      <div className={classes.Background}></div>\n      <form className={classes.FormContainer}>{props.children}</form>\n    </>\n  );\n};\n\nexport default FormContainer;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Background\":\"FormContainer_Background__2lPQo\",\"FormContainer\":\"FormContainer_FormContainer__1rPIB\"};"],"sourceRoot":""}